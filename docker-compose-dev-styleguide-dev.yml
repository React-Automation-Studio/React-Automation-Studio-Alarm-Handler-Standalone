version: '3.2'
services:
  stagingfrontendserverdev:
    env_file: .env
    build:
      context: ./
      dockerfile: docker/frontendserverDev/Dockerfile
    volumes:

      - ./certificates:/certificates/
      - ./ReactApp/jsconfig.json:/frontendserverAppDev/jsconfig.json
      - ./ReactApp/package.json:/frontendserverAppDev/package.json
      - ./ReactApp/src/components:/frontendserverAppDev/src/components
      - ./ReactApp/src/App.js:/frontendserverAppDev/src/App.js
      - ./ReactApp/src/index.css:/frontendserverAppDev/src/index.css
      - ./ReactApp/src/index.js:/frontendserverAppDev/src/index.js
      - ./ReactApp/src/Main.js:/frontendserverAppDev/src/Main.js
      - ./ReactApp/src/MainPublic.js:/frontendserverAppDev/src/MainPublic.js
      - ./ReactApp/src/Routes.js:/frontendserverAppDev/src/Routes.js
      - ./ReactApp/src/serviceWorker.js:/frontendserverAppDev/src/serviceWorker.js
      - ./submodules/React-Automation-Studio/ReactApp/src:/frontendserverAppDev/src/React-Automation-Studio/
      - ./ReactApp/public:/frontendserverAppDev/public
    restart: always
    network_mode: host
  stagingpvserver:
    env_file: .env
    environment:
      - ALARM_DATABASE=${ALARM_DATABASE-localhost}
      - ALARM_DATABASE_REPLICA_SET_NAME=${ALARM_DATABASE_REPLICA_SET_NAME-devrs}
      - LOADSAVE_DATABASE=${ALARM_LOADSAVE_DATABASEDATABASE-localhost}
      - LOADSAVE_DATABASE_REPLICA_SET_NAME=${LOADSAVE_DATABASE_REPLICA_SET_NAME-devrs}
      - DEMO_ARCHIVER=http://localhost:17668
      - pvServerLogLevel=INFO
      - pvServerLogFile=/pvServer/log/pvServerLogFile
      - http_proxy
      - https_proxy
      - no_proxy
    build:
      context: ./
      dockerfile: docker/pvserver/Dockerfile
    restart: always
    network_mode: host
    tty: true
    stdin_open: true
    volumes:
      - ./certificates:/certificates/
      - ./users:/pvServer/userAuthentication/users
      - ./log/:/pvServer/log
  stagingunsecurestylguidepvserver:
    env_file: .env
    environment:
          - REACT_APP_PyEpicsServerPORT=5001
          - REACT_APP_EnableLogin=false
          - DEMO_ARCHIVER=http://localhost:17668
          - http_proxy
          - https_proxy
          - no_proxy


    build:
      context: ./
      dockerfile: docker/pvserver/Dockerfile
    restart: always
    network_mode: host
    volumes:
      - ./certificates:/certificates/
  stagingdemoioc:
    build:
      context: ./  
      dockerfile: docker/demoioc/Dockerfile
    tty: true
    stdin_open: true
    restart: always
    network_mode: host
  stagingtestioc:
      build:
        context: ./
        dockerfile: docker/stagingioc/Dockerfile
      tty: true
      stdin_open: true
      restart: always
      network_mode: host
  styleguideserverdev:
    env_file: .env
    build:
      context: ./
      dockerfile: docker/styleguideServerDev/Dockerfile
    volumes:

      - ./ReactApp/src/components:/app/src/components
      - ./ReactApp/src/docs:/app/src/docs
      - ./ReactApp/styleguide.config.js:/app/styleguide.config.js
    restart: always
    network_mode: host

  ## ALL Database related Docker processes -start
  mongo1:
    image: mongo:4.2.3-bionic
    hostname: mongo1
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data1:/data/db"
      - "mongo-db-configdb1:/data/configdb"
    command: "--bind_ip_all --port 27017 --replSet ${REPLICA_SET_NAME-devrs}"

  mongo2:
    image: mongo:4.2.3-bionic
    hostname: mongo2
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data2:/data/db"
      - "mongo-db-configdb2:/data/configdb"
    command: "--bind_ip_all --port 27018 --replSet ${REPLICA_SET_NAME-devrs}"

  mongo3:
    image: mongo:4.2.3-bionic
    hostname: mongo3
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data3:/data/db"
      - "mongo-db-configdb3:/data/configdb"
    command: "--bind_ip_all --port 27019 --replSet ${REPLICA_SET_NAME-devrs}"
  mongosetup:
    build:
      context: ./submodules/React-Automation-Studio/
      dockerfile: docker/mongoSetup/Dockerfile
    hostname: mongosetup
    restart: on-failure
    network_mode: "host"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    stdin_open: true
    tty: true
    env_file: .env

  initializeloadsavedb: ### This is copy of the main repos loadsavedb init routine and can be fully customized
    env_file: .env
    environment:
      - LOADSAVE_DATABASE=localhost
      - LOADSAVE_DATABASE_REPLICA_SET_NAME=devrs
    build:
      context: ./

      
      dockerfile: docker/loadSaveDbInit/Dockerfile
    network_mode: "host"
    tty: true
    stdin_open: true
    depends_on:
      - mongosetup
  initializealarmhandlerdb:
    build:
      context: ./
      dockerfile: docker/alarmHandlerDbInit/Dockerfile
    hostname: initializealarmhandlerdb
    restart: on-failure
    network_mode: "host"
    depends_on:
      - mongosetup
    stdin_open: true
    tty: true
    env_file: .env
  alarmhandlerserver:
    build:
      context: ./submodules/React-Automation-Studio/
      dockerfile: docker/alarmHandlerServer/Dockerfile
    hostname: alarmhandlerserver
    restart: always
    depends_on:
      - initializealarmhandlerdb
    network_mode: "host"
    stdin_open: true
    tty: true
    env_file: .env

volumes:
  mongo-db-data1:
  mongo-db-configdb1:
  mongo-db-data2:
  mongo-db-configdb2:
  mongo-db-data3:
  mongo-db-configdb3:
## ALL Database related Docker processes -end